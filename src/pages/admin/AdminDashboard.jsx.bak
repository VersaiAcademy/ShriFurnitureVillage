import React, { useState, useEffect } from 'react';import React, { useState, useEffect } from 'react';

import axios from 'axios';import axios from 'axios';

import ProductForm from '../../components/admin/ProductForm';

const AdminDashboard = ({ onLogout }) => {import CategoryForm from '../../components/admin/CategoryForm';

  const [activeTab, setActiveTab] = useState('dashboard');

  const [products, setProducts] = useState([]);const AdminDashboard = ({ onLogout }) => {

  const [categories, setCategories] = useState([]);  const [activeTab, setActiveTab] = useState('dashboard');

  const [orders, setOrders] = useState([]);  const [products, setProducts] = useState([]);

  const [loading, setLoading] = useState(false);  const [categories, setCategories] = useState([]);

  const [error, setError] = useState('');  const [orders, setOrders] = useState([]);

  const [success, setSuccess] = useState('');  const [loading, setLoading] = useState(false);

  const [error, setError] = useState('');

  // Product form state  const [success, setSuccess] = useState('');

  const [showProductForm, setShowProductForm] = useState(false);

  const [editingProduct, setEditingProduct] = useState(null);  // Dashboard stats

  const [productForm, setProductForm] = useState({  const [stats, setStats] = useState({

    title: '',    totalProducts: 0,

    description: '',    totalCategories: 0,

    price: '',    totalOrders: 0,

    category: '',    totalRevenue: 0

    stock: 0,  });

    image: null

  });  // Product form state

  const [showProductForm, setShowProductForm] = useState(false);

  // Category form state  const [editingProduct, setEditingProduct] = useState(null);

  const [showCategoryForm, setShowCategoryForm] = useState(false);  const [productForm, setProductForm] = useState({

  const [categoryForm, setCategoryForm] = useState({    title: '',

    name: '',    description: '',

    slug: ''    price: '',

  });    category: '',

    stock: 0,

  const API_BASE = 'http://localhost:5000/api';    image: null

  const token = localStorage.getItem('adminToken');  });



  const getAuthHeaders = () => ({  // Category form state

    'Authorization': `Bearer ${token}`,  const [showCategoryForm, setShowCategoryForm] = useState(false);

    'Content-Type': 'application/json'  const [categoryForm, setCategoryForm] = useState({

  });    name: '',

    slug: ''

  // Category functions  });

  const handleCategorySubmit = async (e) => {

    e.preventDefault();  const API_BASE = 'http://localhost:5000/api';

    setError('');  const token = localStorage.getItem('adminToken');

    setSuccess('');

  const getAuthHeaders = () => ({

    if (!categoryForm.name || !categoryForm.slug) {    'Authorization': `Bearer ${token}`,

      setError('Please fill in both name and slug');    'Content-Type': 'application/json'

      return;  });

    }

  const getAuthHeadersFormData = () => ({

    const formData = {    'Authorization': `Bearer ${token}`

      name: categoryForm.name.trim(),  });

      slug: categoryForm.slug.trim()

    };  const [backendStatus, setBackendStatus] = useState('checking');



    try {  useEffect(() => {

      const response = await axios.post(`${API_BASE}/categories`, formData, {    loadData();

        headers: getAuthHeaders()    checkBackendStatus();

      });  }, []);

      

      setSuccess('Category added successfully!');  const checkBackendStatus = async () => {

      setShowCategoryForm(false);    try {

      setCategoryForm({ name: '', slug: '' });      await axios.get(`${API_BASE}/health`);

      await loadData();      setBackendStatus('connected');

    } catch (error) {    } catch (error) {

      console.error('Category save error:', error);      setBackendStatus('disconnected');

      setError(error.response?.data?.error || 'Failed to save category');    }

    }  };

  };

  const loadData = async () => {

  const handleCategoryDelete = async (id) => {    setLoading(true);

    if (!window.confirm('Are you sure you want to delete this category?')) {    setError('');

      return;    try {

    }      const [productsRes, categoriesRes, ordersRes] = await Promise.all([

        axios.get(`${API_BASE}/products`, { headers: getAuthHeaders() }),

    try {        axios.get(`${API_BASE}/categories`),

      await axios.delete(`${API_BASE}/categories/${id}`, {        axios.get(`${API_BASE}/orders`, { headers: getAuthHeaders() })

        headers: getAuthHeaders()      ]);

      });

      setSuccess('Category deleted successfully!');      setProducts(productsRes.data);

      await loadData();      setCategories(categoriesRes.data);

    } catch (error) {      setOrders(ordersRes.data);

      setError('Failed to delete category');

    }      setStats({

  };        totalProducts: productsRes.data.length,

        totalCategories: categoriesRes.data.length,

  const loadData = async () => {        totalOrders: ordersRes.data.length,

    setLoading(true);        totalRevenue: ordersRes.data.reduce((sum, order) => sum + (order.totalAmount || 0), 0)

    try {      });

      const categoriesRes = await axios.get(`${API_BASE}/categories`);    } catch (error) {

      setCategories(categoriesRes.data);      console.error('Failed to load data:', error);

    } catch (error) {      setError('Failed to load data. Please check your connection.');

      console.error('Failed to load data:', error);    } finally {

      setError('Failed to load data');      setLoading(false);

    } finally {    }

      setLoading(false);  };

    }

  };  // Product functions

  const handleProductSubmit = async (e) => {

  useEffect(() => {    e.preventDefault();

    loadData();    setError('');

  }, []);    setSuccess('');



  return (    // Validate form

    <div className="min-h-screen bg-gray-100 p-4">    if (!productForm.title || !productForm.description || !productForm.price || !productForm.category) {

      {/* Messages */}      setError('Please fill in all required fields');

      {error && (      return;

        <div className="mb-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">    }

          {error}

        </div>    // Validate price is a number

      )}    if (isNaN(productForm.price) || parseFloat(productForm.price) <= 0) {

      {success && (      setError('Please enter a valid price greater than 0');

        <div className="mb-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">      return;

          {success}    }

        </div>

      )}    // Create form data

    const formData = new FormData();

      {/* Category Management */}    formData.append('title', productForm.title);

      <div className="bg-white rounded-lg shadow p-6">    formData.append('description', productForm.description);

        <div className="flex justify-between items-center mb-6">    formData.append('price', parseFloat(productForm.price));

          <h2 className="text-2xl font-bold">Category Management</h2>    formData.append('category', productForm.category);

          <button    formData.append('stock', parseInt(productForm.stock) || 0);

            onClick={() => setShowCategoryForm(true)}    

            className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700"    if (productForm.image) {

          >      formData.append('image', productForm.image);

            Add New Category    }

          </button>

        </div>    // For debugging - log the form data

    console.log('Form data being sent:');

        {/* Category Form */}    for (let [key, value] of formData.entries()) {

        {showCategoryForm && (      console.log(key, value);

          <div className="mb-6 bg-gray-50 p-4 rounded-lg">    }

            <h3 className="text-lg font-semibold mb-4">Add New Category</h3>

            <form onSubmit={handleCategorySubmit}>    try {

              <div className="space-y-4">      const headers = {

                <div>        ...getAuthHeadersFormData(),

                  <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">        'Accept': 'application/json'

                    Category Name      };

                  </label>

                  <input      console.log('Request headers:', headers);

                    type="text"

                    id="name"      if (editingProduct) {

                    value={categoryForm.name}        const response = await axios.put(`${API_BASE}/products/${editingProduct._id}`, formData, {

                    onChange={(e) => {          headers: headers

                      const name = e.target.value;        });

                      setCategoryForm({        console.log('Update response:', response.data);

                        name,        setSuccess('Product updated successfully!');

                        slug: name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')      } else {

                      });        const response = await axios.post(`${API_BASE}/products`, formData, {

                    }}          headers: headers

                    className="w-full border-gray-300 rounded-md shadow-sm focus:ring-orange-500 focus:border-orange-500"        });

                    required        console.log('Create response:', response.data);

                  />        setSuccess('Product added successfully!');

                </div>      }

                <div>      

                  <label htmlFor="slug" className="block text-sm font-medium text-gray-700 mb-1">      setShowProductForm(false);

                    URL Slug      setEditingProduct(null);

                  </label>      setProductForm({ title: '', description: '', price: '', category: '', stock: 0, image: null });

                  <input      loadData();

                    type="text"    } catch (error) {

                    id="slug"      console.error('Product save error:', error);

                    value={categoryForm.slug}      console.error('Error response:', error.response?.data);

                    onChange={(e) => setCategoryForm({

                      ...categoryForm,      if (error.code === 'ERR_CONNECTION_REFUSED') {

                      slug: e.target.value.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')        setError('Backend server is not running. Please start the backend server first.');

                    })}      } else if (error.response?.status === 401) {

                    className="w-full border-gray-300 rounded-md shadow-sm focus:ring-orange-500 focus:border-orange-500"        setError('Authentication failed. Please login again.');

                    required        handleLogout();

                  />      } else {

                </div>        const errorMessage = error.response?.data?.error || error.message || 'Failed to save product';

                <div className="flex justify-end space-x-3">        setError(`Error: ${errorMessage}. Please check the console for more details.`);

                  <button      }

                    type="button"    }

                    onClick={() => setShowCategoryForm(false)}  };

                    className="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400"

                  >  const handleProductEdit = (product) => {

                    Cancel    setEditingProduct(product);

                  </button>    setProductForm({

                  <button      title: product.title,

                    type="submit"      description: product.description,

                    className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700"      price: product.price,

                  >      category: product.category?.slug || product.category,

                    Add Category      stock: product.stock,

                  </button>      image: null

                </div>    });

              </div>    setShowProductForm(true);

            </form>  };

          </div>

        )}  const handleProductDelete = async (id) => {

    if (window.confirm('Are you sure you want to delete this product?')) {

        {/* Categories List */}      try {

        <div>        await axios.delete(`${API_BASE}/products/${id}`, {

          <h3 className="text-lg font-semibold mb-4">Existing Categories</h3>          headers: getAuthHeaders()

          {loading ? (        });

            <div className="text-center py-4">Loading categories...</div>        setSuccess('Product deleted successfully!');

          ) : (        loadData();

            <div className="overflow-x-auto">      } catch (error) {

              <table className="min-w-full divide-y divide-gray-200">        setError('Failed to delete product');

                <thead className="bg-gray-50">      }

                  <tr>    }

                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">  };

                      Name

                    </th>  // Category functions

                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">  const handleCategorySubmit = async (e) => {

                      Slug    e.preventDefault();

                    </th>    setError('');

                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">    setSuccess('');

                      Actions

                    </th>    // Validate form

                  </tr>    if (!categoryForm.name || !categoryForm.slug) {

                </thead>      setError('Please fill in both name and slug');

                <tbody className="bg-white divide-y divide-gray-200">      return;

                  {categories.map((category) => (    }

                    <tr key={category._id}>

                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">    // Auto-generate slug if not provided

                        {category.name}    const formData = {

                      </td>      name: categoryForm.name.trim(),

                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">      slug: categoryForm.slug.trim() || categoryForm.name.toLowerCase().trim().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')

                        {category.slug}    };

                      </td>

                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">    try {

                        <button      // First check if category exists

                          onClick={() => handleCategoryDelete(category._id)}      const existingCategories = await axios.get(`${API_BASE}/categories`);

                          className="text-red-600 hover:text-red-900"      const categoryExists = existingCategories.data.some(

                        >        cat => cat.slug === formData.slug || cat.name.toLowerCase() === formData.name.toLowerCase()

                          Delete      );

                        </button>

                      </td>      if (categoryExists) {

                    </tr>        setError('A category with this name or slug already exists. Please use a different name.');

                  ))}        return;

                </tbody>      }

              </table>

            </div>      console.log('Submitting category data:', formData);

          )}      const response = await axios.post(`${API_BASE}/categories`, formData, {

        </div>        headers: {

      </div>          ...getAuthHeaders(),

    </div>          'Content-Type': 'application/json'

  );        }

};      });

      

export default AdminDashboard;      console.log('Category creation response:', response.data);
      setSuccess('Category added successfully!');
      setShowCategoryForm(false);
      setCategoryForm({ name: '', slug: '' });
      loadData();
    } catch (error) {
      console.error('Category save error:', error);
      console.error('Error response:', error.response?.data);
      
      if (error.response?.status === 401) {
        setError('Authentication failed. Please login again.');
        handleLogout();
      } else if (error.response?.status === 409) {
        setError('A category with this name or slug already exists. Please use a different name.');
      } else {
        const errorMessage = error.response?.data?.error || error.message || 'Failed to save category';
        setError(`Error: ${errorMessage}. Please check the console for more details.`);
      }
    }
  };

  const handleCategoryDelete = async (id) => {
    if (window.confirm('Are you sure you want to delete this category?')) {
      try {
        await axios.delete(`${API_BASE}/categories/${id}`, {
          headers: getAuthHeaders()
        });
        setSuccess('Category deleted successfully!');
        loadData();
      } catch (error) {
        setError('Failed to delete category');
      }
    }
  };

  const handleLogout = () => {
    localStorage.removeItem('adminToken');
    onLogout();
  };

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <div className="bg-white shadow">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                Sri Furniture Village - Admin Panel
              </h1>
              <div className="flex items-center mt-2">
                <span className="text-sm text-gray-600 mr-2">Backend Status:</span>
                <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                  backendStatus === 'connected' ? 'bg-green-100 text-green-800' :
                  backendStatus === 'disconnected' ? 'bg-red-100 text-red-800' :
                  'bg-yellow-100 text-yellow-800'
                }`}>
                  {backendStatus === 'connected' ? '✅ Connected' :
                   backendStatus === 'disconnected' ? '❌ Disconnected' :
                   '⏳ Checking...'}
                </span>
                {backendStatus === 'disconnected' && (
                  <button
                    onClick={checkBackendStatus}
                    className="ml-2 text-sm text-blue-600 hover:text-blue-800"
                  >
                    Retry
                  </button>
                )}
              </div>
            </div>
            <button
              onClick={handleLogout}
              className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
            >
              Logout
            </button>
          </div>
        </div>
      </div>

      {/* Navigation */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex space-x-8">
            {[
              { id: 'dashboard', label: 'Dashboard' },
              { id: 'products', label: 'Products' },
              { id: 'categories', label: 'Categories' },
              { id: 'orders', label: 'Orders' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab.id
                    ? 'border-orange-500 text-orange-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                {tab.label}
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Messages */}
      {error && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            {error}
          </div>
        </div>
      )}
      {success && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
            {success}
          </div>
        </div>
      )}

      {/* Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'dashboard' && (
          <div>
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Dashboard Overview</h2>
            
            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
              <div className="bg-white overflow-hidden shadow rounded-lg">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 bg-blue-500 rounded-md flex items-center justify-center">
                        <span className="text-white text-sm font-medium">P</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium text-gray-500 truncate">Total Products</dt>
                        <dd className="text-lg font-medium text-gray-900">{stats.totalProducts}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-white overflow-hidden shadow rounded-lg">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 bg-green-500 rounded-md flex items-center justify-center">
                        <span className="text-white text-sm font-medium">C</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium text-gray-500 truncate">Categories</dt>
                        <dd className="text-lg font-medium text-gray-900">{stats.totalCategories}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-white overflow-hidden shadow rounded-lg">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 bg-yellow-500 rounded-md flex items-center justify-center">
                        <span className="text-white text-sm font-medium">O</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium text-gray-500 truncate">Total Orders</dt>
                        <dd className="text-lg font-medium text-gray-900">{stats.totalOrders}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-white overflow-hidden shadow rounded-lg">
                <div className="p-5">
                  <div className="flex items-center">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 bg-purple-500 rounded-md flex items-center justify-center">
                        <span className="text-white text-sm font-medium">₹</span>
                      </div>
                    </div>
                    <div className="ml-5 w-0 flex-1">
                      <dl>
                        <dt className="text-sm font-medium text-gray-500 truncate">Total Revenue</dt>
                        <dd className="text-lg font-medium text-gray-900">₹{stats.totalRevenue.toLocaleString()}</dd>
                      </dl>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-white shadow rounded-lg">
              <div className="px-4 py-5 sm:p-6">
                <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">Quick Actions</h3>
                <div className="flex space-x-4">
                  <button
                    onClick={() => setActiveTab('products')}
                    className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700"
                  >
                    Manage Products
                  </button>
                  <button
                    onClick={() => setActiveTab('categories')}
                    className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700"
                  >
                    Manage Categories
                  </button>
                  <button
                    onClick={() => setActiveTab('orders')}
                    className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700"
                  >
                    View Orders
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'products' && (
          <div>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold text-gray-900">Products Management</h2>
              <button
                onClick={() => {
                  setShowProductForm(true);
                  setEditingProduct(null);
                  setProductForm({ title: '', description: '', price: '', category: '', stock: 0, image: null });
                }}
                className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700"
              >
                Add New Product
              </button>
            </div>

            {/* Product Form */}
            {showProductForm && (
              <div className="bg-white shadow rounded-lg mb-6">
                <div className="px-4 py-5 sm:p-6">
                  <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">
                    {editingProduct ? 'Edit Product' : 'Add New Product'}
                  </h3>
                  <ProductForm
                    productForm={productForm}
                    setProductForm={setProductForm}
                    categories={categories}
                    handleSubmit={handleProductSubmit}
                    handleCancel={() => setShowProductForm(false)}
                    editingProduct={editingProduct}
                  />
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Product Title</label>
                        <input
                          type="text"
                          value={productForm.title}
                          onChange={(e) => setProductForm({ ...productForm, title: e.target.value })}
                          className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                          required
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Price (₹)</label>
                        <input
                          type="number"
                          value={productForm.price}
                          onChange={(e) => setProductForm({ ...productForm, price: e.target.value })}
                          className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                          required
                        />
                      </div>
                    </div>
                    
                    <div className="mt-4">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Description</label>
                      <textarea
                        value={productForm.description}
                        onChange={(e) => setProductForm({ ...productForm, description: e.target.value })}
                        rows="3"
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                        required
                      />
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Category</label>
                        <select
                          value={productForm.category}
                          onChange={(e) => {
                            const selectedCategory = categories.find(cat => cat._id === e.target.value);
                            setProductForm({ ...productForm, category: selectedCategory ? selectedCategory.slug : '' });
                          }}
                          className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                          required
                        >
                          <option value="">Select Category</option>
                          {categories.map(cat => (
                            <option key={cat._id} value={cat._id}>{cat.name}</option>
                          ))}
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">Stock</label>
                        <input
                          type="number"
                          value={productForm.stock}
                          onChange={(e) => setProductForm({ ...productForm, stock: e.target.value })}
                          className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                        />
                      </div>
                    </div>

                    <div className="mt-4">
                      <label className="block text-sm font-medium text-gray-700 mb-1">Product Image</label>
                      <input
                        type="file"
                        accept="image/*"
                        onChange={(e) => setProductForm({ ...productForm, image: e.target.files[0] })}
                        className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                      />
                    </div>

                    <div className="flex justify-end space-x-3 mt-6">
                      <button
                        type="button"
                        onClick={() => setShowProductForm(false)}
                        className="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400"
                      >
                        Cancel
                      </button>
                      <button
                        type="submit"
                        className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700"
                      >
                        {editingProduct ? 'Update Product' : 'Add Product'}
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            )}

            {/* Products List */}
            <div className="bg-white shadow overflow-hidden sm:rounded-md">
              <div className="px-4 py-5 sm:p-6">
                <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">All Products</h3>
                {loading ? (
                  <div className="text-center py-4">Loading products...</div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Image</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {products.map((product) => (
                          <tr key={product._id}>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <img
                                src={product.imageUrl}
                                alt={product.title}
                                className="h-12 w-12 rounded-lg object-cover"
                                onError={(e) => {
                                  // prevent infinite loop in case placeholder also fails
                                  e.currentTarget.onerror = null;
                                  e.currentTarget.src = 'https://via.placeholder.com/48?text=No+Image';
                                  // Log the broken URL for debugging
                                  // eslint-disable-next-line no-console
                                  console.warn('Product image failed to load:', product.imageUrl);
                                }}
                              />
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                              {product.title}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {product.category?.name || 'N/A'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              ₹{product.price?.toLocaleString() || '0'}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {product.stock || 0}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                              <button
                                onClick={() => handleProductEdit(product)}
                                className="text-orange-600 hover:text-orange-900 mr-3"
                              >
                                Edit
                              </button>
                              <button
                                onClick={() => handleProductDelete(product._id)}
                                className="text-red-600 hover:text-red-900"
                              >
                                Delete
                              </button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'categories' && (
          <div>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold text-gray-900">Categories Management</h2>
              <button
                onClick={() => setShowCategoryForm(true)}
                className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700"
              >
                Add New Category
              </button>
            </div>

            {/* Category Form */}
            {showCategoryForm && (
              <div className="bg-white shadow rounded-lg mb-6">
                <div className="px-4 py-5 sm:p-6">
                  <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">Add New Category</h3>
                  <CategoryForm 
                    categoryForm={categoryForm}
                    setCategoryForm={setCategoryForm}
                    handleSubmit={handleCategorySubmit}
                    handleCancel={() => setShowCategoryForm(false)}
                  />
                    <div className="grid grid-cols-1 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          Category Name <span className="text-red-500">*</span>
                        </label>
                        <input
                          type="text"
                          value={categoryForm.name}
                          onChange={(e) => {
                            const name = e.target.value;
                            // Only auto-generate slug if user hasn't manually edited it
                            const shouldUpdateSlug = categoryForm.slug === '' || 
                              categoryForm.slug === categoryForm.name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
                            
                            setCategoryForm({ 
                              name: name,
                              slug: shouldUpdateSlug ? name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '') : categoryForm.slug
                            });
                          }}
                          placeholder="e.g., Wooden Sofas"
                          className="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500"
                          required
                        />
                        <p className="mt-1 text-sm text-gray-500">
                          Enter a unique, descriptive name for the category (e.g., Dining Tables, Office Chairs)
                        </p>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-1">
                          URL Slug <span className="text-red-500">*</span>
                        </label>
                        <div className="flex items-center">
                          <span className="text-gray-500 bg-gray-100 px-3 py-2 border border-r-0 border-gray-300 rounded-l-md">
                            /collections/
                          </span>
                          <input
                            type="text"
                            value={categoryForm.slug}
                            onChange={(e) => setCategoryForm({ 
                              ...categoryForm, 
                              slug: e.target.value.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')
                            })}
                            placeholder="e.g., wooden-sofas"
                            className="w-full border border-gray-300 rounded-none rounded-r-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-orange-500 bg-gray-50"
                            required
                          />
                        </div>
                        <p className="mt-1 text-sm text-gray-500">
                          This will be used in the URL. It's automatically generated from the name, but you can modify it.
                          Only lowercase letters, numbers, and hyphens are allowed.
                        </p>
                      </div>
                    </div>
                    <div className="flex justify-end space-x-3 mt-6">
                      <button
                        type="button"
                        onClick={() => setShowCategoryForm(false)}
                        className="bg-gray-300 text-gray-700 px-4 py-2 rounded hover:bg-gray-400"
                      >
                        Cancel
                      </button>
                      <button
                        type="submit"
                        className="bg-orange-600 text-white px-4 py-2 rounded hover:bg-orange-700"
                      >
                        Add Category
                      </button>
                    </div>
                  </form>
                </div>
              </div>
            )}

            {/* Categories List */}
            <div className="bg-white shadow overflow-hidden sm:rounded-md">
              <div className="px-4 py-5 sm:p-6">
                <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">All Categories</h3>
                {loading ? (
                  <div className="text-center py-4">Loading categories...</div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Slug</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {categories.map((category) => (
                          <tr key={category._id}>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                              {category.name}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {category.slug}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                              <button
                                onClick={() => handleCategoryDelete(category._id)}
                                className="text-red-600 hover:text-red-900"
                              >
                                Delete
                              </button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'orders' && (
          <div>
            <h2 className="text-2xl font-bold text-gray-900 mb-6">Orders Management</h2>
            <div className="bg-white shadow overflow-hidden sm:rounded-md">
              <div className="px-4 py-5 sm:p-6">
                <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">All Orders</h3>
                {loading ? (
                  <div className="text-center py-4">Loading orders...</div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order ID</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Customer</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Items</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {orders.map((order) => (
                          <tr key={order._id}>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {order._id.slice(-8)}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {order.userId}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {order.items?.length || 0} items
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              ₹{(order.totalAmount || 0).toLocaleString()}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                                order.status === 'completed' ? 'bg-green-100 text-green-800' :
                                order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                'bg-gray-100 text-gray-800'
                              }`}>
                                {order.status || 'pending'}
                              </span>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                              {new Date(order.createdAt).toLocaleDateString()}
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminDashboard;